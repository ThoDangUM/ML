% This script tests the Neural Network for Cube 2D: test acceleration and
% online updating
clc;
clear all;
close all;
%% Generate a set of Yd = [u_dot v_dot r_dot]'
Tsample = 300;
dt = 0.1;
K = [1 0 0;0 0 0;0 0 0;0 0 0];
Yd = zeros(3,1);
Cm_NN = zeros(4,1);
Y = zeros(3,1);
% initial weights and biases of NN
alpha = 0.001;% good learning rate:0.001
b1 = [-1.1034512550455219948;-2.073638490284549718;0.89794289258991022429;-1.6480169365373351642;-1.5593473059536702152;2.2949537579047443181;1.7457818854133988484;-1.9553806857709923328;-0.017321184109926664879;-1.3120823068734823735;1.1173888215801395241;-1.3660598688248910548;-1.1166679247794972785;-0.0063033706034492202608;-0.059816023899659842566;-0.014509481175991391019;-0.009739712051447912966;-0.0084258506843894239585;1.1809957519708906837;1.1287808030215995547;1.7493922589041246418;-0.78932432667632523859;-0.0072567219166965067287;2.0974817636965270573;1.5606568963075229117;1.8858489957689879013;1.9013087414794280772;-1.3160715430310947482;2.0503429184605099778;-1.7328818929644334013];
W1 = [0.076232459248542147612 4.6226173663389973356 -0.89042933455601747106;0.19307717730067891493 -2.2868314266913976063 -1.5885876050769520695;-1.1311004560937405472 0.019508557688549733877 0.03115264183704433143;1.7159686610751161417 -0.12851509744225894649 1.5335065955061950582;0.4620730628221459968 -1.6278066893006390981 2.0168233507778707825;-2.8208476568933260609 0.074508100385503955865 2.3766721392872676155;-2.7751987558181610005 3.9619519560101394973 6.8502244790829784904;0.024627916171855220723 -6.4000090661624380317 -1.7869706034871348788;0.021959237466323552196 0.2209460063622862569 -0.41553501051512392594;3.6590422482375539737 -2.1102133900314643533 -5.4533573933452181848;-3.2735590292352294561 1.8277816530766046732 4.7675515322442567623;5.5352269249965493358 -0.065024813905352793486 -1.1017241353927860192;4.4178068342083145481 0.011964058974308645553 0.63400007685736980978;3.2345620834276274103 3.8991177338657974083 -6.8107019082214588224;0.14817246297207115058 -3.1550343023137741305 3.1297514809873154817;-3.9241745943232944072 -3.6856727426044573193 -7.5772589472890903295;-3.6857317107521843091 -3.8206003207406045163 -7.4605194311807396801;3.9358877041773063787 3.4146350959994755669 -7.1724144477205307169;4.737693465379013702 0.13551089512890013289 0.6812032399219820622;4.4938699218718589634 0.10955312227341987286 -0.4883334823297953986;0.28418747894183954417 -1.7003479211140792859 -1.7805328329034610935;-1.0193003580216770665 0.0094454401390602522881 -0.018895448154947307173;0.084920177885350653368 0.22931725771184263696 0.34411857163959042039;0.87706773198128729074 -2.3573563108695694268 3.1382374689855931926;0.51142391488109106845 -1.7652801178605790344 2.168641554485244427;2.0355612122048358792 0.022230015876598372554 -1.619303377784583553;2.1752331100132451525 -0.022816706370271330057 1.6240660489832225988;0.081965443765024056932 5.3447696213829622991 -1.1548202487860466103;-0.78175023048373182277 2.1334563606559595605 -2.8230376183242285038;-2.2360581188145847165 4.3021326871991130147 6.1514507337407691168];

b2 = [-0.25420318438609440514;0.19895914950213355876;-0.12385333386035460301;0.27650534732648451852];
W2 = [-0.75838238454811368605 0.56350490300402278354 -0.45727901766357020863 0.70403294611948097348 -2.2987616824896432988 0.24281560930431889123 -0.057248721605191905948 0.067206599986952803016 -1.4857495851618638394 -0.43694369742998101502 -0.47243260279789961453 -0.10229346897250744808 0.15179719827950408084 -0.14097640781723325132 -0.14368766242938973976 0.39982674305863386 -0.40540176782763770458 0.12098350752664206731 0.18477863027306515309 -0.18243826268415810898 0.64565240022336112258 -1.3450378627531436315 -0.72483510392381389487 0.72003043909891439878 -1.8202047885943988259 -0.58756304553941640645 0.42193742163665742817 0.61925045547339319096 -0.96051921913797000396 -0.045053605907539234776;0.74436073239659106271 -0.57484209926026053061 -0.70534182113484900079 -0.7145844282401280223 2.3739536762090445166 -0.1795810535800247687 0.051086704637088108105 -0.06286361283204776329 2.4455133991908479807 0.54266536885231209109 0.59682357991553247611 0.125168113898887573 -0.16514640903369293135 0.14654999190391362895 0.14892634540972490842 -0.37415298216378661822 0.36895162675880277536 -0.13424905919328294912 -0.21108743432285959063 0.21965259597034567096 -0.66586699205777644117 -0.045384970518938590189 -4.4739098898537621452 -0.74525626802879274546 1.8770267712474186794 0.50339427617571297358 -0.46111104929187468615 -0.60928074835657264341 1.002055802940974516 0.039031099873731427141;-0.78594685475333958546 0.57332006752600928046 1.2766507749647291181 0.79694997835228820193 -1.9756253041274336457 0.16302625159138942057 -0.062766766651363992136 0.069293549903357259945 -0.92884423268790949901 -0.54096575148335990235 -0.58677075738467310284 -0.10234148596370661044 0.13894479515762026001 -0.1568560701133400459 -0.13042601026220010385 0.35875746440369404855 -0.36858692199327314221 0.14093226814792134127 0.18898472034485166993 -0.19132015235999649816 0.65593872376011741476 0.82129031676166541764 -0.52704018435316291047 0.56393841398184629821 -1.5322791884103417193 -0.47518811950211514716 0.55911414412268467533 0.64119758543149629748 -0.78153522696935184833 -0.048004170013000085904;0.66521585821486151069 -0.56170600024513717141 -0.44108367742157672531 -0.7224454093536065713 1.9842671150016653048 -0.17489661329763517283 0.06065710654277611108 -0.068585538549848279466 5.4752514043985591741 0.55628304729496458325 0.60603273506630417344 0.12167872607521104666 -0.1681172748377093018 0.12438680648792389827 0.071303924012970087976 -0.40147389640980041259 0.40600677405767016115 -0.12429032243892493281 -0.21206398091155542751 0.21566363940372387797 -0.65753978189371875551 0.29729604589197772269 0.2272628077195953944 -0.63066911690881566344 1.5514195405118813564 0.50173466296000679421 -0.45192756147986307136 -0.53376142830367434566 0.85178506350387606094 0.046481723683979174477];

% store
Yd_store = [];
Cm_NN_store = [];
Cm_e_store = [];
Cm_store = [];
Y_store = [];
e_store = [];


for i=1:Tsample
    time(i) = dt*i;
%    sample(i) = i;
    %------------------Step function--------------
%     if i<=100,
%         Yd(1,i) = 2;
%         Yd(2,i) = 0;
%         Yd(3,i) = 0;
%     else
%         if (i>100)&&(i<=200)
%             Yd(1,i) = 1.5;
%             Yd(2,i) = 0;
%             Yd(3,i) = 0;
%             
%         else
%             Yd(1,i) = 0.5;
%             Yd(2,i) = 0;
%             Yd(3,i) = 0;
%         end
%     end
    %-----------------------------------------------
    %----------------Sin function-------------------
%     Yd(1,i)= 2*sin((2*pi/Tsample)*i);
%     Yd(2,i)=0;
%     Yd(3,i)=0;
    %-----------------------------------------------
    %---------------------triangle function------------------
    if i<=100,
        Yd(1,1) = (2/100)*i;
        Yd(2,1) = 0;
        Yd(3,1) = 0;
    else 
        if (i>100)&&(i<=200),
            Yd(1,1) = (3-i/100);
            Yd(2,1) = 0;
            Yd(3,1) = 0;
        else
            Yd(1,1) = 1;
            Yd(2,1) = 0;
            Yd(3,1) = 0;
        end
        
    end
    %-----------------------------------------------


    %Apply Cm to Cube simulation to find Y
    Cm = Cm_NN;
    Y(:,1) = Cube_2D_PWM_Accel(Cm(:,1));
    % Error e = Yd - Y: udot, vdot, rdot
    e = Yd - Y;
    Cm_e = K*e;
    % compute forward propagation ouputs of the network
    n1 = W1*Yd + b1;
    a1 = (1-exp(-2.*n1))./(1+exp(-2.*n1));%a1 = (1-exp(-n1))./(1+exp(-n1));
    n2 = W2*a1 + b2;
    a2 = n2;% purelinear
        
    % compute backward propagation sensitivities
    df2_dn2 = 1;
    df1_dn1 = (4.*exp(-2.*n1))./((1+exp(-2.*n1)).^2);
    
    s2 = -2*eye(4)*Cm_e;%-2*eye(4)*Cm_e;
    s1 = diag(df1_dn1)*W2'*s2;
    
    % update weights and biases
    b2 = b2 - alpha*s2;
    W2 = W2 - alpha*s2*a1';
    b1 = b1 - alpha*s1;
    W1 = W1 - alpha*s1*Yd';
    
    %Apply Yd to Neural Network to find Cm
    Cm_NN(:,1)= myNeuralNetworkFunction_30_Bayesian_accel_online(Yd(:,1),b1,W1,b2,W2);
    % Store results
    Yd_store = [Yd_store Yd];
    Cm_NN_store = [Cm_NN_store Cm_NN];
    Cm_e_store = [Cm_e_store Cm_e];
    Cm_store = [Cm_store Cm];
    Y_store = [Y_store Y];
    e_store = [e_store e];

end

%% Plot error/results
figure(5);
plot(time,Yd_store(1,:),'LineWidth',2);
hold on;
plot(time,Y_store(1,:),'LineWidth',2);
title('Surge accel(m/s^2)');
legend('ud-dot','u-dot');
xlabel('time(s)');
ylabel('u-dot');
figure(6);
plot(time,Yd_store(2,:),'LineWidth',2);
hold on;
plot(time,Y_store(2,:),'LineWidth',2);
title('Sway accel(m/s^2)');
legend('vd-dot','v-dot');
xlabel('time(s)');
ylabel('v-dot');
figure(7);
plot(time,Yd_store(3,:),'LineWidth',2);
hold on;
plot(time,Y_store(3,:),'LineWidth',2);
title('Yaw accel(degree/s^2)');
legend('rd-dot','r-dot');
xlabel('time(s)');
ylabel('r-dot');
% plot error
figure(8);
plot(time,e_store(1,:),'LineWidth',2);
hold on;
plot(time,e_store(2,:),'LineWidth',2);
plot(time,e_store(3,:),'LineWidth',2);
legend('eu-dot','ev-dot','er-dot');
xlabel('time(s)');
ylabel('Error derivative');
% plot Cm
figure(9);
plot(time,Cm_store(1,:),'LineWidth',2);
hold on;
plot(time,Cm_store(2,:),'LineWidth',2);
plot(time,Cm_store(3,:),'LineWidth',2);
plot(time,Cm_store(4,:),'LineWidth',2);
legend('Cm1','Cm2','Cm3','Cm4');
xlabel('time(s)');
ylabel('Cm');
%% Plot in the same scale
figure(10);
plot(time,Yd_store(1,:),'LineWidth',2);
hold on;
plot(time,Y_store(1,:),'LineWidth',2);
plot(time,Yd_store(2,:),'LineWidth',2);
plot(time,Y_store(2,:),'LineWidth',2);
plot(time,Yd_store(3,:),'LineWidth',2);
plot(time,Y_store(3,:),'LineWidth',2);
legend('ud-dot','u-dot','vd-dot','v-dot','rd-dot','r-dot');
xlabel('time(s)');
ylabel('output');


