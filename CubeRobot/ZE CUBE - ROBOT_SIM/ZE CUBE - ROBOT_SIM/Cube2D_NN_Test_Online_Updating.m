% This script tests the Neural Network for Cube 2D
clc;
clear all;
close all;
%% Yd = [u v r]'/Initialize
Tsim = 400;
dt = 0.1;
K = [1 0.1 0.2;0.5 0.2 0.3;1 0.5 0.7;0.01 1 0.8];%0.5*ones(4,3);
Yd = zeros(3,1);
Cm_NN = zeros(4,1);
Cm_e = zeros(4,1);
Y = zeros(3,1);
% NN
alpha = 0.001; % learning rate
b1 = [6.5241127945348562633;-4.3106809561168510925;-0.5254352795348093963;-5.5418595025556474098;5.1842522146019209828;-8.164504067021042033;7.8664020252765309849;220.17972486761209439;0.97452961253405656628;221.28427815380695165;-3.9779735436418843797;0.56088206403904439235;0.55298366438865742545;-1.1951756705186664664;-0.54024208656572270115;-7.8847090428700887799;-3.8352020378386475485;-0.53276570681142310093;-0.36804949309350698528;0.49814454140485958655;-1.1337572092463199525;0.58156164958656675346;4.554141573005538568;-0.67536012358835650904;-0.46294524219379495911;178.49885739410450469;-178.50907038259825299;-0.40911105072210368627;0.34304505721796896278;0.47467293294006984716];
W1 = [2.7593738005439072403 -0.036570250140629999291 6.0493306027276636527;2.0693487683725790838 -0.17583553087059644593 -5.755773907703352954;-0.40564608058811529867 -0.27862978417086831096 -0.45797479566941612372;-2.3799951408279720333 -0.47022233803096208371 -5.226834979706857176;0.64404760889653500655 0.017169182392334059184 -5.6466057888015326327;-0.67258188185305589624 -0.95585648443761339621 -8.1294518761211875812;1.6599345180018685308 0.54926738428843835393 7.6602984024576405986;0.15788175967426087976 -0.88210191640758439657 -218.32702945154701979;-0.29112892219430608343 0.27942417363003441144 1.3230838224175760498;0.14476895733619155049 -0.957744742298453966 218.76398297704432139;-0.039898027755271250894 0.23067586474151827169 4.5480583250744803792;-3.7627174775209861757 -3.6372016969218683435 -0.27047806819637237874;-3.702299740002881645 -3.5332784558555361265 0.0058043173794969501675;1.5228696762858797698 -0.11380979024578179171 2.9256246865209871721;3.6724443002703655026 3.4712867623755361279 -0.20363257490860356413;-2.5848787809677635785 0.027297703482402541075 -7.4587288655801975423;0.17149293086903280581 -0.032127613091653746402 4.6560045003442764866;0.093554575118745528228 -0.024576279532647335446 1.0964718973623346354;-0.50584235738059635246 -0.33945751066429524778 1.3071759057019056716;0.32556009455840012601 0.29678116473715759893 -0.14667987641170934787;0.18540908562087707323 -0.20997306979264035443 -0.72706365273582618247;0.58418526027440809134 0.28988150839687831795 0.95635575232397096457;0.44027800785564658037 -0.20496049919793032923 -5.0428296017960505537;0.012453309259843415094 -0.21382246359949944048 0.63297180850357925852;3.3518168193083313078 -3.864916230044570522 0.053924059055129112961;-1.252250483077812282 -0.29951436369027878426 -177.7568333234106035;0.87252655123805755721 0.56147445425158304388 177.37681545907830127;3.2003304014861568838 -3.7609943225146436063 0.43790482960972937354;-3.1396273643110412799 3.8939360763982251434 -0.77739588708346574197;-3.4356856832423088299 3.9664482320335991972 0.14227260124873827851];
b2 = [2.1048807164017730997;33.976685755000637812;-13.291008949308579901;14.181865959182713866];
W2 = [-25.786682821846603986 0.11299522366673907248 45.705715279290984654 -20.35301705598479316 -19.901644236167161495 -10.750561430520313877 -28.861416677400338671 58.137131190582294948 9.8850308731334983747 -10.605988403481138249 32.912783447078481913 5.0251253265272728399 -12.803502977707175603 0.92356557289603380401 -7.7502697815259331549 -26.227182019260894208 -5.7591721634252470707 20.017888187928996047 -2.1662975717781103313 4.3555246606171156287 35.894796950345629227 25.173360766841643255 44.519517153259876352 -32.659038387264850201 -16.074310416375638511 16.953288303392728409 47.495561368002121583 9.2743215023180827217 2.5845380583884396408 -9.3804610831004726634;21.64911026512952219 -1.2276220614370687567 8.6604655627055926459 10.028992390716844341 -3.7713737985970956501 -5.4717833260514101568 3.3035721541134877022 -5.4211266487650178192 27.627170512521729506 -7.8342189458442463845 -22.170582590248550048 -5.1374703070551381856 12.55589748846261422 -0.87048485815248566322 7.3859008683207214574 18.776529908311541561 10.380015445500070825 2.9173158517265678213 4.5884130783033443279 27.667939426616008802 67.189035187690279827 -6.8601895869409190709 -6.5859675260684742426 11.215556662947879119 13.368850775751637272 -10.790649689809267642 -23.553561907797874397 -8.1975597489258404948 -2.3376322400141860136 7.4988497220664207532;35.354458646291377022 0.7583935796736220869 -0.88326989416311474379 23.327055841134409775 12.409480511530064817 20.004799890473762503 43.102404894989803097 -30.412516747560864872 -30.765721994987281107 -19.802973474835347645 -20.712044993943187876 5.5967307151952301325 -13.166000868748836794 0.63058247587267024503 -7.5334496191994118064 37.583667073772247136 4.1972298411321640188 -22.767628032005838179 -1.0218917900272437294 5.2647528148501532286 -93.483829067713912764 -0.69735066501165554609 -27.441315291182956315 35.285441659525162095 -10.976191154677390927 -10.956876664151904421 -30.696245021046937751 6.4451889620030655692 1.6715788456441091903 -6.159271812938537316;-32.987780417111835618 0.28112333291068192231 -57.180916333968966114 -13.618235177598840835 11.985426256451999549 -4.8912554044134575193 -21.050140772940121536 13.511030383128060706 -6.8521657442185182063 -22.798142563828807994 8.3412841545109426278 -5.4396889871475337941 13.488391148543511733 -0.72405352949269374818 8.018629277413579004 -33.405711143184220191 -7.9691016080209342576 -2.0254274063709889475 -1.4358186241643700054 -37.737267786023785732 -8.9217511965589988421 -19.803853426072709709 -11.701897026395911894 -12.150222433898360208 15.679831783726513095 11.793232074083778826 25.351682271341005048 -9.5509168536439386088 -2.6964928659623681462 8.8198633659080698521];
% Updating
H = [1 2 2 3;4 5 7 9;11 1 8 3];%1*ones(3,4);
T = H*K;
%
Yd_store =[];
Cm_NN_store = [];
Cm_e_store = [];
Y_store = [];
e_store = [];
for i=1:Tsim
    time(i) = dt*i;
    %------------------Step function--------------
%     if i<=100,
%         Yd(1,1) = 2;
%         Yd(2,1) = 0;
%         Yd(3,1) = 0;
%     else
%         if (i>100)&&(i<=200)
%             Yd(1,1) = 2;
%             Yd(2,1) = 0;
%             Yd(3,1) = 0;
%             
%         else
%             Yd(1,1) = 2;
%             Yd(2,1) = 0;
%             Yd(3,1) = 0;
%         end
%     end
    %-----------------------------------------------
    %----------------Sin function-------------------
    Yd(1,1)= 2*sin((2*pi/Tsim)*i);
    Yd(2,1)=0;
    Yd(3,1)=0;
    %-----------------------------------------------
    %Cm = Cm_NN + Cm_e;
    Cm = Cm_NN;
     % Apply Cm to the Cube to get Y
    Y(:,1) = Cube_2D_PWM(Cm(:,1));
   
    % Error e = Yd - Y: u,v,r
    e = Yd  - Y;
        
    % Update the weights and bias of the Neural Network
    n1 = W1*Yd + b1;
    f1 = (1-exp(-2.*n1))./(1+exp(-2.*n1));%f1 = (1-exp(-n1))./(1+exp(-n1));
    df1_dn1 =(4.*exp(-2.*n1))./((1+exp(-2.*n1)).^2);%df1_dn1 =(2.*exp(-n1))./((1+exp(-n1)).^2);
    
    % reshape and preprocessing to compute deltas
    %
    df1_dn1_reshape = eye(30);
    for j=1:30
        df1_dn1_reshape(j,j)=df1_dn1(j);
    end
    %
    dn1_dW1 = [Yd(1).*eye(30) Yd(2).*eye(30) Yd(3).*eye(30)];
    %
    dn2_dW2 = [];
    for k=1:30
        dn2_dW2 =[dn2_dW2 f1(k).*eye(4)];  
    end
    %
    delta_b1 = (-inv(T)*H*W2*df1_dn1_reshape)'*e;%0*zeros(size(b1,1),1);%0*zeros(size(b1,1),1)
    delta_W1 = (-inv(T)*H*W2*df1_dn1_reshape*dn1_dW1)'*e;%0*zeros(size(W1,1),1);%0*zeros(size(W1,1),1);
    delta_b2 = (-inv(T)*H)'*e;%0*zeros(size(b2,1),1);
    delta_W2 = (-inv(T)*H*dn2_dW2)'*e;%0*zeros(size(W2,1),1);%0*zeros(size(W2,1),1);
    %
    % reshape again 
    delta_W1 = reshape(delta_W1,30,3);
    delta_W2 = reshape(delta_W2,4,30);
    %
    b1 = b1 - alpha*delta_b1;
    W1 = W1 - alpha*delta_W1;
    b2 = b2 - alpha*delta_b2;
    W2 = W2 - alpha*delta_W2;
    
    % Apply Yd to Neural Network to find Cm^NN
    Cm_NN(:,1)= myNeuralNetworkFunction_30_BayesianR_online(Yd(:,1),b1,W1,b2,W2);
    % Compute Cm_e
    Cm_e = K*e;
    % Store results
    Yd_store = [Yd_store Yd];
    Cm_NN_store = [Cm_NN_store Cm_NN];
    Cm_e_store = [Cm_e_store Cm_e];
    Y_store = [Y_store Y];
    e_store = [e_store e];
    
end

%% Apply Yd to Neural Network to find Cm
% for j=1:size(Yd,2)
%     Cmm(:,j)= myNeuralNetworkFunction_30_BayesianR(Yd(:,j));
%    % Cmm(:,j)= myNeuralNetworkFunction_41_sample(Yd(:,j));% 41 interval, 20
%    % neurons for hidden layers, LM algorithm
% end
% 
% %% Apply Cm to Cube simulation to find Y
% for k = 1:size(Cmm,2)
%     Y(:,k) = Cube_2D_PWM(Cmm(:,k));
% end

%% Plot error/results
figure(5);
plot(time,Yd_store(1,:),'LineWidth',2);
hold on;
plot(time,Y_store(1,:),'LineWidth',2);
title('Surge speed(m/s)');
legend('ud','u');
xlabel('time(s)');
ylabel('u');
figure(6);
plot(time,Yd_store(2,:),'LineWidth',2);
hold on;
plot(time,Y_store(2,:),'LineWidth',2);
title('Sway speed(m/s)');
legend('vd','v');
xlabel('time(s)');
ylabel('v');
figure(7);
plot(time,Yd_store(3,:),'LineWidth',2);
hold on;
plot(time,Y_store(3,:),'LineWidth',2);
title('Yaw rate(degree/s)');
legend('rd','r');
xlabel('time(s)');
ylabel('r');
%% Plot in the same scale
% figure(8);
% plot(time,Yd_store(1,:),'LineWidth',2);
% hold on;
% plot(time,Y_store(1,:),'LineWidth',2);
% plot(time,Yd_store(2,:),'LineWidth',2);
% plot(time,Y_store(2,:),'LineWidth',2);
% plot(time,Yd_store(3,:),'LineWidth',2);
% plot(time,Y_store(3,:),'LineWidth',2);
% legend('ud','u','vd','v','rd','r');
% xlabel('time(s)');
% ylabel('output');


