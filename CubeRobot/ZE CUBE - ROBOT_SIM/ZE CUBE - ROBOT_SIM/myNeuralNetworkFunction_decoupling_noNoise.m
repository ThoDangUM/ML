function [y1] = myNeuralNetworkFunction_decoupling_noNoise(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Jun-2022 09:57:37.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 4xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-13.59;-13.59;-20];
x1_step1.gain = [0.0735835172921266;0.0735835172921266;0.05];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.0076925150476418952331;-3.5332187315065476617e-05;-2.7037176469200697857e-05;-0.0076925124880290038018;-0.0068765786435037532659;-3.5333812447516281335e-05;2.1497693787452100905e-05;0.00079094016875086165918;-0.003216448759455032072;0.0068765835678433013742];
IW1_1 = [0.39032896180084869497 0.44692764148006763891 -0.39447694791000309511;0.42725333497271722472 -0.42529787779363437128 0.39896418739075739657;-0.34044623898814047047 0.33909501715375689468 0.39046815273443058469;0.39032896182892706793 0.44692764157259001756 -0.39447686363529477216;-0.44477793324527836738 -0.39876239181351325058 -0.39451288269148271359;0.42725333490710948325 -0.42529787788261280701 0.3989641569048990033;0.34043764840967111196 -0.33911129506978365811 -0.39045991325270817951;-0.022300444962623910267 0.020193747223378293032 1.6118018675138130469;-0.34486230637008141731 0.32962938973995009606 0.39057317971161031878;0.44477793356524497614 0.39876239123100848394 0.39451307149435854704];

% Layer 2
b2 = [0.011166106424578209691;0.00077481337669645339132;0.012973826961432332119;0.0042476354548657479712];
LW2_1 = [0.65304667695116813686 -0.055130679144044680839 -0.60369353437677109042 0.65304668379893915375 0.033075914790325962322 -0.055130681419799751342 0.60368971574307828121 0.76461986281660199172 -0.6059656357893005163 -0.033075899659903949812;-0.06675485172610957918 0.036858776474985442684 -0.5098740702437424277 -0.066754847496353866831 0.56025120426381924688 0.036858775022525061549 0.50988368216574408986 0.42547474390730216642 -0.50445821191576500908 -0.56025119469757367341;0.083396627396699354873 -0.68824664625214371227 -0.11259753373146161315 0.083396634761038104799 0.69905471566262711303 -0.68824664872929330883 0.11260609484665909386 0.76705148110096543768 -0.1085486636109125741 -0.69905469931058783484;0.60117943536900453338 -0.59276370782240317414 -0.020928274616781098599 0.60117944002574874585 -0.021128884672952496365 -0.59276370941045208873 0.020914628976188155696 0.42761382848474088769 -0.029100303334164415864 0.021128895475167920603];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.01;0.01;0.01;0.01];
y1_step1.xoffset = [-100;-100;-100;-100];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
